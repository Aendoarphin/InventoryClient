/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as IndexRouteImport } from './routes/index'
import { Route as ManageVendorRouteImport } from './routes/manage.Vendor'
import { Route as ManageItemRouteImport } from './routes/manage.Item'
import { Route as ManageEmployeeRouteImport } from './routes/manage.Employee'

const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const ManageVendorRoute = ManageVendorRouteImport.update({
  id: '/manage/Vendor',
  path: '/manage/Vendor',
  getParentRoute: () => rootRouteImport,
} as any)
const ManageItemRoute = ManageItemRouteImport.update({
  id: '/manage/Item',
  path: '/manage/Item',
  getParentRoute: () => rootRouteImport,
} as any)
const ManageEmployeeRoute = ManageEmployeeRouteImport.update({
  id: '/manage/Employee',
  path: '/manage/Employee',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/manage/Employee': typeof ManageEmployeeRoute
  '/manage/Item': typeof ManageItemRoute
  '/manage/Vendor': typeof ManageVendorRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/manage/Employee': typeof ManageEmployeeRoute
  '/manage/Item': typeof ManageItemRoute
  '/manage/Vendor': typeof ManageVendorRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/manage/Employee': typeof ManageEmployeeRoute
  '/manage/Item': typeof ManageItemRoute
  '/manage/Vendor': typeof ManageVendorRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/manage/Employee' | '/manage/Item' | '/manage/Vendor'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/manage/Employee' | '/manage/Item' | '/manage/Vendor'
  id: '__root__' | '/' | '/manage/Employee' | '/manage/Item' | '/manage/Vendor'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ManageEmployeeRoute: typeof ManageEmployeeRoute
  ManageItemRoute: typeof ManageItemRoute
  ManageVendorRoute: typeof ManageVendorRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/manage/Vendor': {
      id: '/manage/Vendor'
      path: '/manage/Vendor'
      fullPath: '/manage/Vendor'
      preLoaderRoute: typeof ManageVendorRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/manage/Item': {
      id: '/manage/Item'
      path: '/manage/Item'
      fullPath: '/manage/Item'
      preLoaderRoute: typeof ManageItemRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/manage/Employee': {
      id: '/manage/Employee'
      path: '/manage/Employee'
      fullPath: '/manage/Employee'
      preLoaderRoute: typeof ManageEmployeeRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ManageEmployeeRoute: ManageEmployeeRoute,
  ManageItemRoute: ManageItemRoute,
  ManageVendorRoute: ManageVendorRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
